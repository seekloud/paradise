app {


  server {
    protocol = "http"
    host = ""
    port = 0
    InternalToken = ""
  }

  http {
    interface = ""
    port = 0
  }

  esheep{
    gameId = 0
    gsKey = ""

    protocol = "http"
    host = ""
    //    host = ""
    port = 0
    domain = ""


    authToken = true

  }

  gameRecordIsWork = true
  gameDataDirectoryPath = "gameDataDirectoryPath/"
  gameRecordTime = 3 //min

  essfMap = "EssfMap"

  minPlayerNum = 13

  bot {
    botId = ["1001", "1002", "1003", "1004", "1005", "1006", "1007", "1008", "1009","1010","1011","1012"]
    botName = ["大喵", "二喵", "三喵", "四喵", "五喵", "六喵", "七喵", "八喵", "九喵", "十喵", "十一喵", "十二喵"]
  }

//  minPlayerNum = 4
//  bot {
//    botId = ["1001", "1002", "1003"]
//    botName = ["大狗", "二狗", "三狗"]
//  }

  client {
    appIds = []
    secureKeys = []
  }

  versionSetting {
    project = "2019_01_22"
  }

}


slick.db {
  url = "jdbc:postgresql://localhost:5432/paradise?characterEncoding=utf-8" //local

  user = ""
  password = ""
  maximumPoolSize = 3
  connectTimeout = 30000
  idleTimeout = 300000
  maxLifetime = 900000
}


akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"


  scheduler {
    # The LightArrayRevolverScheduler is used as the default scheduler in the
    # system. It does not execute the scheduled tasks on exact time, but on every
    # tick, it will run everything that is (over)due. You can increase or decrease
    # the accuracy of the execution timing by specifying smaller or larger tick
    # duration. If you are scheduling a lot of tasks you should consider increasing
    # the ticks per wheel.
    # Note that it might take up to 1 tick to stop the Timer, so setting the
    # tick-duration to a high value will make shutting down the actor system
    # take longer.
    tick-duration = 10ms

    # The timer uses a circular wheel of buckets to store the timer tasks.
    # This should be set such that the majority of scheduled timeouts (for high
    # scheduling frequency) will be shorter than one rotation of the wheel
    # (ticks-per-wheel * ticks-duration)
    # THIS MUST BE A POWER OF TWO!
    ticks-per-wheel = 512

    # This setting selects the timer implementation which shall be loaded at
    # system start-up.
    # The class given here must implement the akka.actor.Scheduler interface
    # and offer a public constructor which takes three arguments:
    #  1) com.typesafe.config.Config
    #  2) akka.event.LoggingAdapter
    #  3) java.util.concurrent.ThreadFactory
    implementation = akka.actor.LightArrayRevolverScheduler

    # When shutting down the scheduler, there will typically be a thread which
    # needs to be stopped, and this timeout determines how long to wait for
    # that to happen. In case of timeout the shutdown of the actor system will
    # proceed without running possibly still enqueued tasks.
    shutdown-timeout = 5s
  }

  actor {


    warn-about-java-serializer-usage = false

    default-dispatcher {

      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8

        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        # parallelism-factor = 3.0
        parallelism-factor = 3.0

        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 64

        # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
        # like peeking mode which "pop".
        task-peeking-mode = "FIFO"
      }
    }

    my-blocking-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"

      thread-pool-executor {
        # Keep alive time for threads
        keep-alive-time = 60s

        # Define a fixed thread pool size with this property. The corePoolSize
        # and the maximumPoolSize of the ThreadPoolExecutor will be set to this
        # value, if it is defined. Then the other pool-size properties will not
        # be used.
        #
        # Valid values are: `off` or a positive integer.
        fixed-pool-size = off

        # Min number of threads to cap factor-based corePoolSize number to
        core-pool-size-min = 16

        # The core-pool-size-factor is used to determine corePoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor).
        # Resulting size is then bounded by the core-pool-size-min and
        # core-pool-size-max values.
        core-pool-size-factor = 100.0

        # Max number of threads to cap factor-based corePoolSize number to
        core-pool-size-max = 256

        # Minimum number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-min = 16

        # The max-pool-size-factor is used to determine maximumPoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor)
        # The maximumPoolSize will not be less than corePoolSize.
        # It is only used if using a bounded task queue.
        max-pool-size-factor = 100.0

        # Max number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-max = 256

        # Specifies the bounded capacity of the task queue (< 1 == unbounded)
        task-queue-size = -1

        # Specifies which type of task queue will be used, can be "array" or
        # "linked" (default)
        task-queue-type = "linked"

        # Allow core threads to time out
        allow-core-timeout = on
      }

      throughput = 100
    }

  }


  http {

    server {

      remote-address-header = on

      parsing {

        max-content-length = 12m
        max-chunk-ext-length = 256
        max-chunk-size = 2m

      }
    }
  }


  persistence {

    journal {

      plugin = "akka.persistence.journal.leveldb"

      leveldb {
        dir = "./akkaPersist/journal"

        #off for sbt test run, on for produce.
        native = off
      }
    }

    snapshot-store {

      plugin = "akka.persistence.snapshot-store.local"

      local {
        dir = "./akkaPersist/snapshot"
        #dir = "/home/zhangtao/product/mpAuthor/akkaPersist/snapshot"
      }
    }
  }

}


# Configuratino for Play ws
play.ws {

  timeout {

    # If non null, the connection timeout, this is how long to wait for a TCP connection to be made
    connection = 2 minutes

    # If non null, the idle timeout, this is how long to wait for any IO activity from the remote host
    # while making a request
    idle = 2 minutes

    # If non null, the request timeout, this is the maximum amount of time to wait for the whole request
    request = 2 minutes
  }

  # Whether redirects should be followed
  followRedirects = true

  # Whether the JDK proxy properties should be read
  useProxyProperties = true

  # If non null, will set the User-Agent header on requests to this
  useragent = null

  # Whether compression should be used on incoming and outgoing requests
  compressionEnabled = false


  # Configuration specific to the Ahc implementation of the WS client
  ahc {
    # Pools connections.  Replaces setAllowPoolingConnections and setAllowPoolingSslConnections.
    keepAlive = true

    # The maximum number of connections to make per host. -1 means no maximum.
    maxConnectionsPerHost = -1

    # The maximum total number of connections. -1 means no maximum.
    maxConnectionsTotal = 1000

    # The maximum number of redirects.
    maxNumberOfRedirects = 5

    # The maximum number of times to retry a request if it fails.
    maxRequestRetry = 5

    # If non null, the maximum time that a connection should live for in the pool.
    maxConnectionLifetime = 30 minute

    # If non null, the time after which a connection that has been idle in the pool should be closed.
    idleConnectionInPoolTimeout = 1 minute

    # Whether the raw URL should be used.
    disableUrlEncoding = false

  }
}